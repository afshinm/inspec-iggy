#
# Author:: Matt Ray (<matt@chef.io>)
#
# Copyright:: 2018, Chef Software, Inc <legal@chef.io>
#

require "iggy"

require "json"
require "thor"

module Iggy
  class CloudFormation < Thor
    option :template,
      :aliases => "-t",
      :desc    => "Specify path to the input CloudFormation template"

    option :debug,
      :desc    => "Verbose debugging messages",
      :type    => :boolean,
      :default => false

    desc "generate [options]", "Generate InSpec compliance controls from CloudFormation template"
    long_desc <<-LONGDESC
Reads in a CloudFormation JSON file and generates matching InSpec compliance controls.
    LONGDESC
    def generate
      Iggy::Log.level = :debug if options[:debug]
      Iggy::Log.debug "CloudFormation.generate file = #{options[:template]}"
      # hash of generated controls
      generated_controls = parse_generate(options[:template])
      Iggy::Log.debug "CloudFormation.generate generated_controls = #{generated_controls}"
      # let's just generate a control file with a set of controls for now
      Iggy::Inspec.print_controls(options[:template], generated_controls)
      exit 0
    end

    private

    def parse_generate(file)
      Iggy::Log.debug "CloudFormation.parse_generate file = #{file}"
      begin
        unless File.file?(file)
          STDERR.puts "ERROR: #{file} is an invalid file, please check your path."
          exit(-1)
        end
        template = JSON.parse(File.read(file))
      rescue JSON::ParserError => e
        STDERR.puts e.message
        STDERR.puts "ERROR: Parsing error in #{file}."
        exit(-1)
      end
      basename = File.basename(file)
      absolutename = File.absolute_path(file)

      # InSpec controls generated
      generated_controls = {}

      # iterate over the resources
      cfn_resources = template["Resources"]
      # iterate over the Resources, use these as IDs?
      cfn_resources.keys.each do |cfn_res|
        # split out the last ::, these are all AWS
        cfn_res_type = "aws_" + cfn_resources[cfn_res]["Type"].split("::").last.downcase

        # does this match an InSpec resource?
        if Inspec::RESOURCES.include?(cfn_res_type)
          Iggy::Log.debug "CloudFormation.parse_generate cfn_res_type = #{cfn_res_type} MATCH"
          # insert new control based off the resource's ID
          generated_controls[cfn_res] = {}
          generated_controls[cfn_res]["name"] = "#{cfn_res_type}::#{cfn_res}"
          generated_controls[cfn_res]["title"] = "Iggy #{basename} #{cfn_res_type}::#{cfn_res}"
          generated_controls[cfn_res]["desc"] = "#{cfn_res_type}::#{cfn_res} from the source file #{absolutename}\nGenerated by Iggy v#{Iggy::VERSION}"
          generated_controls[cfn_res]["impact"] = "1.0"
          generated_controls[cfn_res]["resource"] = cfn_res_type
          generated_controls[cfn_res]["parameter"] = cfn_res
          generated_controls[cfn_res]["tests"] = []
          generated_controls[cfn_res]["tests"][0] = "it { should exist }"

          # if there's a match, see if there are matching InSpec properties
          inspec_properties = Iggy::Inspec.resource_properties(cfn_res_type)

          cfn_resources[cfn_res]["Properties"].keys.each do |attr|
            # insert '_' on the CamelCase to get camel_case
            attr_split = attr.split /(?=[A-Z])/
            property = attr_split.join("_").downcase
            if inspec_properties.member?(property)
              Iggy::Log.debug "CloudFormation.parse_generate #{cfn_res_type} inspec_property = #{property} MATCH"
              value = cfn_resources[cfn_res]["Properties"][attr]
              # skip the {"Ref"=>"VPC"} for now
              generated_controls[cfn_res]["tests"].push("its('#{property}') { should cmp '#{value}' }") unless value.is_a? Hash
            else
              Iggy::Log.debug "CloudFormation.parse_generate #{cfn_res_type} inspec_property = #{property} SKIP"
            end
          end
        else
          Iggy::Log.debug "CloudFormation.parse_generate cfn_res_type = #{cfn_res_type} SKIP"
        end
      end
      generated_controls
    end

  end
end
