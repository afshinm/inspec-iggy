#
# Author:: Matt Ray (<matt@chef.io>)
#
# Copyright:: 2018, Chef Software, Inc <legal@chef.io>
#

require "iggy"

require "json"

module Iggy
  class Terraform

    def self.parse(file)
      Iggy::Log.debug "Terraform.parse file = #{file}"
      begin
        unless File.file?(file)
          STDERR.puts "ERROR: #{file} is an invalid file, please check your path."
          exit(-1)
        end
        tfstate = JSON.parse(File.read(file))
      rescue JSON::ParserError => e
        STDERR.puts e.message
        STDERR.puts "ERROR: Parsing error in #{file}."
        exit(-1)
      end

      basename = File.basename(file)
      absolutename = File.absolute_path(file)

      # InSpec controls generated
      generated_controls = {}

      # iterate over the resources
      # this is hard-coded, I expect tfstate files are not homogeneous as the example
      tf_resources = tfstate["modules"][0]["resources"]
      tf_resources.keys.each do |tf_res|
        tf_res_type = tf_resources[tf_res]["type"]

        # does this match an InSpec resource?
        if Inspec::RESOURCES.include?(tf_res_type)
          Iggy::Log.debug "Terraform.parse tf_res_type = #{tf_res_type} MATCH"
          tf_res_id = tf_resources[tf_res]["primary"]["id"]
          # insert new control based off the resource's ID
          generated_controls[tf_res_id] = {}
          generated_controls[tf_res_id]["name"] = "#{tf_res_type}::#{tf_res_id}"
          generated_controls[tf_res_id]["title"] = "Iggy #{basename} #{tf_res_type}::#{tf_res_id}"
          generated_controls[tf_res_id]["desc"] = "#{tf_res_type}::#{tf_res_id} from the source file #{absolutename}\nGenerated by Iggy v#{Iggy::VERSION}"
          generated_controls[tf_res_id]["impact"] = "1.0"
          generated_controls[tf_res_id]["resource"] = tf_res_type
          generated_controls[tf_res_id]["parameter"] = tf_res_id
          generated_controls[tf_res_id]["tests"] = []
          generated_controls[tf_res_id]["tests"][0] = "it { should exist }"

          # if there's a match, see if there are matching InSpec properties
          inspec_properties = Iggy::Inspec.resource_properties(tf_res_type)
          Iggy::Log.debug "Terraform.parse #{tf_res_type} inspec_properties = #{inspec_properties}"
          tf_resources[tf_res]["primary"]["attributes"].keys.each do |attr|
            if inspec_properties.member?(attr)
              # not sure how to do this yet
              Iggy::Log.debug "Terraform.parse #{tf_res_type} inspec_property = #{attr} MATCH"
              generated_controls[tf_res_id]["tests"].push("# WRITE A TEST FOR #{attr}")
            else
              Iggy::Log.debug "Terraform.parse #{tf_res_type} inspec_property = #{attr} SKIP"
            end
          end
        else
          Iggy::Log.debug "Terraform.parse tf_res_type = #{tf_res_type} SKIP"
        end

        # is there a tagged profile attached?
        # if resources[tf_res]["primary"]["attributes"]["tags.compliance_profile"]
        #   # this is probably drastically lacking. What machines are we checking?
        #   @compliance_profiles[tf_res_id] = resources[tf_res]["primary"]["attributes"]["tags.compliance_profile"]
        # end
      end
      generated_controls
    end
  end
end
